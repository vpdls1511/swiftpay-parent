pipeline {
    agent {
        kubernetes {
            yaml '''
apiVersion: v1
kind: Pod
spec:
  serviceAccountName: jenkins
  containers:
  - name: gradle
    image: gradle:8.5-jdk17
    command: ['sleep', '9999999']
    volumeMounts:
    - name: gradle-cache
      mountPath: /home/gradle/.gradle
    resources:
      requests:
        memory: "2Gi"
        cpu: "500m"
      limits:
        memory: "4Gi"
        cpu: "2"
  - name: kaniko
    image: gcr.io/kaniko-project/executor:debug
    command: ['sleep', '9999999']
  - name: kubectl
    image: alpine/k8s:1.28.3
    command: ['sleep']
    args: ['9999999']
  volumes:
  - name: gradle-cache
    persistentVolumeClaim:
      claimName: jenkins-gradle-cache
'''
        }
    }

    parameters {
        gitParameter(
            name: 'BRANCH',
            type: 'PT_BRANCH',
            defaultValue: 'origin/dev',
            description: '배포할 브랜치를 선택하세요',
            branchFilter: 'origin/(.*)',
            listSize: '10',
            sortMode: 'ASCENDING_SMART'
        )
    }

    environment {
        REGISTRY = "container-registry.infra.svc.cluster.local:5000"
        IMAGE_NAME = "swiftpay-payment"
        IMAGE_TAG = "${env.BUILD_NUMBER}"
        NAMESPACE = "swiftpay"
        DEPLOYMENT = "swiftpay-payment"
        GRADLE_OPTS = "-Dorg.gradle.daemon=false -Dorg.gradle.caching=true"
    }

    stages {
        stage('Checkout') {
            steps {
                script {
                    def branchName = params.BRANCH.replaceAll('origin/', '')
                    
                    git branch: branchName,
                        url: 'https://github.com/vpdls1511/swiftpay-parent.git',
                        credentialsId: 'github-token'
                }
            }
        }

        stage('Build JAR') {
            steps {
                container('gradle') {
                    sh '''
                        echo "=== Gradle 캐시 확인 ==="
                        ls -lah /home/gradle/.gradle/ 2>/dev/null || echo "첫 빌드"

                        ./gradlew :module:application:payment:build \
                          -x test \
                          --parallel \
                          --no-daemon \
                          --build-cache \
                          --console=plain
                    '''
                }
            }
        }

        stage('Build & Push Image') {
            steps {
                container('kaniko') {
                    sh """
                        /kaniko/executor \
                          --context=\${WORKSPACE}/module/application/payment \
                          --dockerfile=\${WORKSPACE}/module/application/payment/Dockerfile \
                          --destination=\${REGISTRY}/\${IMAGE_NAME}:\${IMAGE_TAG} \
                          --destination=\${REGISTRY}/\${IMAGE_NAME}:latest \
                          --insecure \
                          --skip-tls-verify
                    """
                }
            }
        }

        stage('Deploy to K3s') {
            steps {
                container('kubectl') {
                    sh """
                        kubectl set image deployment/\${DEPLOYMENT} \
                          \${DEPLOYMENT}=\${REGISTRY}/\${IMAGE_NAME}:\${IMAGE_TAG} \
                          -n \${NAMESPACE}

                        kubectl rollout status deployment/\${DEPLOYMENT} -n \${NAMESPACE} --timeout=5m
                    """
                }
            }
        }
    }

    post {
        success {
            echo "Deployment completed successfully!"
        }
        failure {
            echo "Deployment failed!"
        }
    }
}
