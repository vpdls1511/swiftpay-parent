pipeline {
    agent any

    environment {
        MODULE_NAME      = 'api'
        MODULE_DIR       = "swiftpay-${MODULE_NAME}"     // repo ÎÇ¥ Î™®Îìà Ìè¥ÎçîÎ™Ö
        IMAGE_NAME       = "swiftpay-${MODULE_NAME}"
        IMAGE_TAG        = "${BUILD_NUMBER}"
        REGISTRY         = 'docker-regi-service.infrastructure:5000'
        KUBECONFIG       = '/var/jenkins_home/.kube/config'
        ACTIVE_PROFILE   = 'prod'

        // Gradle JVM / Ï∫êÏãú ÏÑ§Ï†ï
        GRADLE_OPTS      = '-Xmx1024m -Dorg.gradle.daemon=false'
        GRADLE_USER_HOME = '/var/jenkins_home/.gradle'
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
                script {
                    env.GIT_COMMIT_SHORT = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
                }
            }
        }

        stage('Build & Test') {
            steps {
                withEnv(["GRADLE_OPTS=${GRADLE_OPTS}", "GRADLE_USER_HOME=${GRADLE_USER_HOME}"]) {
                    sh "./gradlew :${MODULE_DIR}:build -x test"
                }
            }
            post {
                always {
                    junit testResults: "${MODULE_DIR}/build/test-results/test/*.xml", allowEmptyResults: true
                    archiveArtifacts artifacts: "${MODULE_DIR}/build/libs/*.jar", fingerprint: true
                }
            }
        }

        stage('Docker Build & Push') {
            steps {
                echo "üê≥ Building Docker image (context: ${MODULE_DIR}/deploy)..."
                dir("${MODULE_DIR}/deploy") {
                    script {
                        def image = docker.build("${REGISTRY}/${IMAGE_NAME}:${IMAGE_TAG}")
                        docker.withRegistry("http://${REGISTRY}") {
                            image.push()
                            image.push("latest")
                        }
                        echo "‚úÖ Docker image pushed: ${REGISTRY}/${IMAGE_NAME}:${IMAGE_TAG}"
                    }
                }
            }
        }

        stage('Deploy to K3s') {
            steps {
                echo "üöÄ Deploying ${MODULE_NAME} to K3s..."
                script {
                    def springProfiles = "${ACTIVE_PROFILE}"

                    // Ïù¥ÎØ∏ÏßÄ ÏóÖÎç∞Ïù¥Ìä∏
                    sh """
                        kubectl set image deployment/swiftpay-${MODULE_NAME} \\
                            swiftpay-${MODULE_NAME}=${REGISTRY}/${IMAGE_NAME}:${IMAGE_TAG} -n swiftpay || echo "kubectl set image failed"
                    """

                    // ÌôòÍ≤ΩÎ≥ÄÏàò ÏÑ§Ï†ï
                    sh """
                        kubectl set env deployment/swiftpay-${MODULE_NAME} \\
                            SPRING_PROFILES_ACTIVE=${springProfiles} -n swiftpay || echo "kubectl set env failed"
                    """

                    // Î°§ÏïÑÏõÉ ÏÉÅÌÉú ÌôïÏù∏
                    sh """
                        kubectl rollout status deployment/swiftpay-${MODULE_NAME} -n swiftpay --timeout=300s
                    """
                }
            }
        }

        stage('Health Check') {
            steps {
                echo "üè• Health checking ${MODULE_NAME}..."
                script {
                    timeout(time: 120, unit: 'SECONDS') {
                        waitUntil {
                            script {
                                def status = sh(script: "curl -f -s https://swiftpay-api.ngyu.me/api/actuator/health >/dev/null 2>&1; echo \$?", returnStdout: true).trim()
                                return status == '0'
                            }
                        }
                    }
                    echo "‚úÖ ${MODULE_NAME} health check passed!"
                }
            }
        }

        stage('Deployment Info') {
            steps {
                script {
                    sh """
                        echo "üìã Deployment Info"
                        echo "Module: ${MODULE_NAME}"
                        echo "Image: ${REGISTRY}/${IMAGE_NAME}:${IMAGE_TAG}"
                        echo "Git Commit: ${env.GIT_COMMIT_SHORT}"
                        echo "Build Number: ${BUILD_NUMBER}"
                        echo "Deployment Time: \$(date)"
                        kubectl get pods -n swiftpay -l app=swiftpay-${MODULE_NAME} || true
                    """
                }
            }
        }
    }

    post {
        always { cleanWs() }
        success {
            echo "üéâ ${MODULE_NAME} deployment successful!"
            echo "üåê Access URL: https://swiftpay-api.ngyu.me/api/actuator/health"
        }
        failure {
            echo "‚ùå ${MODULE_NAME} deployment failed!"
            script {
                sh """
                    echo "üîÑ Rolling back..."
                    kubectl rollout undo deployment/swiftpay-${MODULE_NAME} -n swiftpay || echo "No previous revision"
                """
            }
        }
    }
}
